type: edu
custom_name: Builders implementation
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 360
    length: 56
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 352
    initialized_from_dependency: false
    possible_answer: |-
      val tr = TR()
              tr.init()
              children += tr
    selected: true
    status: Solved
  - offset: 491
    length: 56
    placeholder_text: /* TODO */
    initial_state:
      length: 10
      offset: 437
    initialized_from_dependency: false
    possible_answer: children += TD().apply(init)
    selected: true
    status: Solved
  text: |-
    open class Tag(val name: String) {
        protected val children = mutableListOf<Tag>()

        override fun toString() =
                "<$name>${children.joinToString("")}</$name>"
    }

    fun table(init: TABLE.() -> Unit): TABLE {
        val table = TABLE()
        table.init()
        return table
    }

    class TABLE : Tag("table") {
        fun tr(init: TR.() -> Unit) {
            /* TODO */
        }
    }

    class TR : Tag("tr") {
        fun td(init: TD.() -> Unit) {
            /* TODO */
        }
    }

    class TD : Tag("td")

    fun createTable() =
            table {
                tr {
                    repeat(2) {
                        td {
                        }
                    }
                }
            }

    fun main() {
        println(createTable())
        //<table><tr><td></td><td></td></tr></table>
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    import org.junit.Assert
    import org.junit.Test

    class HtmlDslTest {
        @Test(timeout = 1000)
        fun testSample() {
            Assert.assertEquals(
                    "Wrong result for createTable()",
                    "<table><tr><td></td><td></td></tr></table>",
                    createTable().toString())
        }

        @Test(timeout = 1000)
        fun testTable1() {
            Assert.assertEquals(
                    "Wrong result for 'table { tr { td {} } }'",
                    "<table><tr><td></td></tr></table>",
                    table { tr { td {} } }.toString()
            )
        }

        @Test(timeout = 1000)
        fun testTable2() {
            Assert.assertEquals(
                    "Wrong result for 'repeat(3) { tr { td {} } }'",
                    "<table><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr></table>",
                    table {
                        repeat(3) {
                            tr { td {} }
                        }
                    }.toString()
            )
        }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 22 Sep 2020 20:47:19 UTC
record: -1
